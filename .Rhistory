?list.files
args(list.files)
q()
library(swirl)
swirl()
skip
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.remove("mytest.R")
file.copy("mytest2.R", mytest.R)
file.copy("mytest2.R", "mytest.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create("testdir2")$file.path("testdir3")
skip
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(1, 10, by = 0.5)
seq(0, 10, by = 0.5)
my_seq <- seq(5, 10, length = 30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
q()
library(swirl)
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = "")
paste(my_char, collapse = " ")
my_name <- c(my_char, "Sola")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-" )
x ,- c(44, NA, 5, NA)
x <- c(44, NA, 5, NA)
x x 3
x3
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
mean(my_na)
my_data == NA
sum(my_na)
my_data
0 / 0
Inf - Inf
x
library(swirl)
swirl()
any(ints < 0)
all(ints > 0)
q
90
q()
library(swirl)
swirl()
Sys.Date()
mean(c(2, 4, 5))
submit()
getwd()
setwd
library("data.table")
library("gglot2")
librar
library("gglot2")
library("ggplot2")
p
nei <- readRDS("C://Users//Olusola//Desktop//ExData_Project2//summarySCC_PM25.rds")
scc <- readRDS("C://Users//Olusola//Desktop//ExData_Project2//Source_Classification_Code.rds")
merged <- merge(nei, scc, by="SCC")
df <- data.table(merged)
# Filter records to those which contains the word 'coal' in Short.Name
coal <- grepl("coal", df$Short.Name, ignore.case=TRUE)
coal <- data.table(merged[coal, ])
by_year <- coal[, list(emissions=sum(Emissions)), by=c('year')]
by_year$year = as.numeric(as.character(by_year$year))
by_year$emissions = as.numeric(as.character(by_year$emissions))
ggplot(data=by_year, aes(x=year, y=emissions)) + geom_line() + geom_point() + ggtitle("Emissions from Coal Sources in the US")
dev.copy(png, file="plot4.png", width=480, height=480)
dev.off()
q()
getwd()
q()
library(swirl)
swirl()
viewinfo()
class(flat)
class(flags)
as.list(flags)
cls_list <- (flags, class)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
cls_vect
sum(flags$orange)
flags_colors <- flags[, 11:17]
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
q()
q()
q()
q()
library(ggplot2)
H1 <- ggplot(data = na.omit(stepsDaily), aes(x = steps)) +
geom_histogram(fill = "green", binwidth = 1000) +
xlab("Total number of steps Daily") +
ylab("Frequency") +
ggtitle("Histogram of the Total Numner of Steps Taken Each Day")
# Set working directory
# Download file
setwd("C://Users//Olusola//Desktop//RR_WK2")
activityDataFileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
activityDataZipFile <- "activity.zip"
if (!file.exists(activityDataZipFile)) {
download.file(activityDataFileUrl, activityDataZipFile, mode = "wb")
}
# unzip downloaded file
activityDataFile <- "activity"
if (!file.exists(activityDataFile)) {
unzip(activityDataZipFile)
}
# Read data into object variable dataFile
dataFile <- read.csv("activity.csv")
# Observe data using summary()
summary(dataFile)
# Change date from object of class factor to object of class date
dataFile$date <- as.Date(as.character(dataFile$date))
# Observe data again
summary(dataFile)
# Create data without NAs to compute mean later
dataFileNAs <- is.na(dataFile$steps)
cleanDataFile <- dataFile[!dataFileNAs,]
# Use tapply() to calculate the total number of steps taken per day
stepsDaily <- tapply(dataFile$steps, dataFile$date, sum, na.rm = TRUE)
head(stepsDaily)
library(ggplot2)
H1 <- ggplot(data = na.omit(stepsDaily), aes(x = steps)) +
geom_histogram(fill = "green", binwidth = 1000) +
xlab("Total number of steps Daily") +
ylab("Frequency") +
ggtitle("Histogram of the Total Numner of Steps Taken Each Day")
?ggplot
library(ggplot2)
H1 <- ggplot(data = stepsDaily, aes(x = steps)) +
geom_histogram(fill = "green", binwidth = 1000) +
xlab("Total number of steps Daily") +
ylab("Frequency") +
ggtitle("Histogram of the Total Numner of Steps Taken Each Day")
summary(stepsDaily)
str(stepsDaily)
is.array(stepsDaily)
is.data.frame(stepsDaily)
q()
sessionInfo()
q()
capColor = c(huey = "red", duey = "blue", louie = "green")
capColor[]
capColor["louie"]
names(capColor)[capColor == "blue"]
x <- c(4, 7, 6, 5, 2, 8)
I <- x < 6
J <- x > 7
x[I | J]
x[c(TRUE, FALSE)]
x[c(-1, -2)]
X <- 1:10
X[C(TRUE, FALSE)] <- 1
X[C(TRUE, FALSE)] <- 1
X[c(TRUE, FALSE)] <- 1
x
m<
l
m <- X[c(TRUE, FALSE)] <- 1
m
x <- c(4, 7, 6, 5, 2, 8)
x[c(TRUE)]
x[c(FALSE)]
x[c(TRUE, FALSE)]
m <- X[c(TRUE, FALSE)] <- 1
m
L <- list(x = c(1:5), y = c("a", "b", "c"), z = capColor )
L[[2]]
L$y
L$y
[]
L$y
L[c(1, 3)]
L[1]
L[c("x", "y")]
L[["z"]]
q()
q()
library(swirl)
swirl()
0.64
0.64
mypdf
skip()
0.03
1
1.14
skip()
0.00097
0.0997
.000997
.985015
skip()
.0665332
.006609346
skip()
1/6
1
21/6
expect_dice()
expect_dice(pmf)
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
.5(edh + edl)
skip()
integrate(0, 2)
integrate(myfunc(0, 2))
skip()
spop
mean(spop)
allsam
apply(allsam, 1, mean)
mean(smeans)
q()
x <- 1:4
p <- x/sum(x)
p
temp <- rbind(x, p)
temp
row.names(temp) <- c("X", "Prob")
temp
q()
qunif
qunif(p = 0.75, min min = 0, max = 1)
qunif(p = 0.75, min = 0, max = 1)
q()
library(swirl)
swirl()
skip()
pbinom(2, 5, 0.8, lower.tail = FALSE)
qnorm(0.1)
0
qnorm(0-975, 3, 2)
qnorm(0-975, mean = 3, sd = 2)
qnorm(0-975, mean=3, sd=2)
qnorm(0.975, mean = 3, sd = 2)
3 + 1.96 * 2
pnorm(1200, mean = 1020, sd = 50, lower.tail = FALSE)
1200 - 1020/50
(1200 - 1020)/50
pnorm((1200 - 1020)/50, lower.tail = FALSE)
q()
library(swirl)
swirl()
library(swirl)
swirl()
skip()
pnorm(2, lower.tail = TRUE)
pnorm(2, lower.tail = FALSE)
mybin
pbinom(6, 8, .5, lower.tail =FALSE )
pbinom(7, 8, .5, lower.tail =FALSE )
pbinom(7, size = 8, prob = .5, lower.tail = FALSE)
pbinom(7, size = 8, prob = .5, lower.tail = TRUE)
ppois(9, 5, lower.tail = FALSE)
data("sleep")
head(sleep)
head(sleep, 15)
q()
y <- 6, 7, 8, 3, 9, 1
y <- 6, 7, 8, 3, 9, 1
q()
library(datasets)
data("swiss")
require(GGALLY)
require(ggplot2)
q()
?abline
library("data.table")
library("ggplot2")
set.seed(31)
lambda <- 0.2
n <- 40
simulations <- 1000
simulated_exponentials <- replicate(simulations, rexp(n, lambda))
means_exponentials <- apply(simulated_exponentials, 2, mean)
analytical_mean <- mean(means_exponentials)
analytical_mean
theory_mean <- 1/lambda
theory_mean
hist(means_exponentials, xlab = "mean", main = "Exponential Function Simulations")
abline(v = analytical_mean, col = "red")
abline(v = theory_mean, col = "orange")
q()
q()
library(swirl)
swirl()
plot(child ~ parent, galton)
plot(jitter(child) ~ parent, galton)
plot(jitter(child, 4) ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline
abline(regrline, lwd = 3, col="red")
summary(regrline)
library(swirl)
swirl()
swirl()
install.packages(car)
install.packages('car')
install.packages("car")
library(swirl)
swirl()
q()
library(swirl)
swirl()
ravenData
md1 <- glm(ravenWinNum ~ ravenScore, family, ravenData)
md1 <- glm(ravenWinNum ~ ravenScore, family = binomial, ravenData)
md1 <- glm(ravenWinNum ~ ravenScore, binomial, ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, binomial, ravenData)
lodds <- predict(mdl, data.frame(ravenScore = c(0, 3, 6)))
exp(lodds)/(1 + exp(lodds))
summary(mdl)
confint(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
q()
library(swirl)
swirl()
which.max(hits[, 'visits'])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- offset = log(visits + 1)
skip()
qpois(.95, mdl2$fitted.values[704])
q()
head(mtcars)
View(mtcars)
View(mtcars)
q()
q()
library(AppliedPredictiveModeling)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
data("concrete")
library(caret)
library(caret)
set.seed(1000)
inTrain <- createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training <- mixtures[inTrain]
training <- mixtures[inTrain,]
testing <- mixtures[-inTrain,]
q()
library(AppliedPredictiveModeling)
data("concrete")
library(caret)
set.seed(1000)
library(AppliedPredictiveModeling)
data("concrete")
library(caret)
set.seed(1000)
inTrain <- createDataPartition(mixtures$CompressiveStrength, p = 3/4)
training <- mixtures[inTrain,]
training <- mixtures[inTrain,]
training = mixtures[inTrain,]
training <- mixtures[ inTrain,]
inTrain <- createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training <- mixtures[ inTrain,]
testing <- mixtures[-inTrain]
q()
a <- available.packages()
library(stats)
search()
library(ggplot2)
search()
find.package("devtools")
library(devtools)
find_rtools()
q
q()
find.package(rattle)
find.package(rattle)
find.package(rattle)
find.package(rattle)
find.package(rattle)
library(rattle)
find.package(rattle)
find.package("rattle")
library(AppliedPredictiveModeling)
data("segmentationOriginal")
library()
data("segmentationOriginal
m
gdgdgdn
;
()
1
==
we
+
/
q()
library(AppliedPredictiveModeling)
data("segmentationOriginal)
)
()
library(AppliedPredictiveModeling)
data("segmentationOriginal")
library(caret)
inTrain <- createDataPartition(y = segmentationOriginal$Case, p = 0.7, list = FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
dim(training)
dim(testing)
set.seed(125)
modFit <- train(Class ~ ., method = "rpart", data = training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform = TRUE, main = "Classification Tree")
text(modFit$finalModel, use.n = TRUE, all = TRUE, cex = 0.8)
library(ggplot2)
suppressMessages(library(rattle))
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
library(pgmm)
library("pgmm")
library("pgmm")
data("olive")
olive = olive[, -1]
newdata <- as.data.frame(t(colMeans(olive)))
modolive <- train(Area ~ ., method = "rpart", data = olive)
predict(modolive, newdata = newdata)
library(ElemStatLearn)
library(ElemStatLearn)
data("SAheart")
set.seed(8484)
train <- sample(1:dim(SAheart[1], size = dim(SAheart)[1]/2, replace = F))
train <- sample(1:dim(SAheart)[1], size = dim(SAheart)[1]/2, replace = F)
trainSA <- SAheart[train,]
testSA <- SAheart[-train,]
set.seed(13234)
modelSA <- train(chd ~ age + alcohol + obesity + tobaccco + typea + ldl, data = trainSA, method = "glm", family = "binomial")
modelSA <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data = trainSA, method = "glm", family = "binomial")
missClass(testSA$chd, predict(modelSA, newdata = testSA))
find.package("randomForest")
library(randomForest)
q()
setwd("C://Users//Olusola//Desktop//PML_WK4")
initial <- read.table("pml-training.csv", nrows = 100)
classes <- sapply(initial, class)
tabAll <- read.table("pml-training.csv", colClasses = classes)
tabAll
q()
q()
q()
q()
q()
q()
